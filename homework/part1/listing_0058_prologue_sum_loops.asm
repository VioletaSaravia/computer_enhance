; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35214.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	add
PUBLIC	SingleScalar
PUBLIC	Unroll2Scalar
PUBLIC	DualScalar
PUBLIC	QuadScalar
PUBLIC	QuadScalarPtr
PUBLIC	TreeScalarPtr
pdata	SEGMENT
$pdata$SingleScalar DD imagerel $LN6
	DD	imagerel $LN6+81
	DD	imagerel $unwind$SingleScalar
$pdata$Unroll2Scalar DD imagerel $LN6
	DD	imagerel $LN6+109
	DD	imagerel $unwind$Unroll2Scalar
$pdata$DualScalar DD imagerel $LN6
	DD	imagerel $LN6+135
	DD	imagerel $unwind$DualScalar
$pdata$QuadScalar DD imagerel $LN6
	DD	imagerel $LN6+215
	DD	imagerel $unwind$QuadScalar
$pdata$QuadScalarPtr DD imagerel $LN5
	DD	imagerel $LN5+255
	DD	imagerel $unwind$QuadScalarPtr
$pdata$TreeScalarPtr DD imagerel $LN5
	DD	imagerel $LN5+195
	DD	imagerel $unwind$TreeScalarPtr
pdata	ENDS
xdata	SEGMENT
$unwind$SingleScalar DD 010d01H
	DD	0220dH
$unwind$Unroll2Scalar DD 010d01H
	DD	0220dH
$unwind$DualScalar DD 010d01H
	DD	0220dH
$unwind$QuadScalar DD 010d01H
	DD	0420dH
$unwind$QuadScalarPtr DD 010d01H
	DD	0420dH
$unwind$TreeScalarPtr DD 010d01H
	DD	0420dH
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Sum$ = 0
tv67 = 4
TempB$1 = 8
TempA$2 = 12
Temp$3 = 16
Count$ = 48
Input$ = 56
TreeScalarPtr PROC
; File C:\Users\zucw\Learning\computer_enhance\perfaware\part1\listing_0058_prologue_sum_loops.cpp
; Line 116
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 117
	mov	DWORD PTR Sum$[rsp], 0
; Line 119
	xor	edx, edx
	mov	eax, DWORD PTR Count$[rsp]
	mov	ecx, 4
	div	ecx
	mov	DWORD PTR Count$[rsp], eax
$LN2@TreeScalar:
; Line 120
	mov	eax, DWORD PTR Count$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	mov	eax, DWORD PTR Count$[rsp]
	dec	eax
	mov	DWORD PTR Count$[rsp], eax
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@TreeScalar
; Line 122
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rdx+rax]
	mov	rdx, QWORD PTR Input$[rsp]
	add	eax, DWORD PTR [rdx+rcx]
	mov	DWORD PTR TempA$2[rsp], eax
; Line 123
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rdx+rax]
	mov	rdx, QWORD PTR Input$[rsp]
	add	eax, DWORD PTR [rdx+rcx]
	mov	DWORD PTR TempB$1[rsp], eax
; Line 124
	mov	eax, DWORD PTR TempB$1[rsp]
	mov	ecx, DWORD PTR TempA$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Temp$3[rsp], eax
; Line 125
	mov	eax, DWORD PTR Temp$3[rsp]
	mov	ecx, DWORD PTR Sum$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
; Line 126
	mov	rax, QWORD PTR Input$[rsp]
	add	rax, 16
	mov	QWORD PTR Input$[rsp], rax
; Line 127
	jmp	$LN2@TreeScalar
$LN3@TreeScalar:
; Line 129
	mov	eax, DWORD PTR Sum$[rsp]
; Line 130
	add	rsp, 40					; 00000028H
	ret	0
TreeScalarPtr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
SumB$ = 0
SumA$ = 4
SumC$ = 8
SumD$ = 12
tv67 = 16
Sum$ = 20
Count$ = 48
Input$ = 56
QuadScalarPtr PROC
; File C:\Users\zucw\Learning\computer_enhance\perfaware\part1\listing_0058_prologue_sum_loops.cpp
; Line 95
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 96
	mov	DWORD PTR SumA$[rsp], 0
; Line 97
	mov	DWORD PTR SumB$[rsp], 0
; Line 98
	mov	DWORD PTR SumC$[rsp], 0
; Line 99
	mov	DWORD PTR SumD$[rsp], 0
; Line 101
	xor	edx, edx
	mov	eax, DWORD PTR Count$[rsp]
	mov	ecx, 4
	div	ecx
	mov	DWORD PTR Count$[rsp], eax
$LN2@QuadScalar:
; Line 102
	mov	eax, DWORD PTR Count$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	mov	eax, DWORD PTR Count$[rsp]
	dec	eax
	mov	DWORD PTR Count$[rsp], eax
	cmp	DWORD PTR tv67[rsp], 0
	je	$LN3@QuadScalar
; Line 104
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR SumA$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumA$[rsp], eax
; Line 105
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR SumB$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumB$[rsp], eax
; Line 106
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR SumC$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumC$[rsp], eax
; Line 107
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	ecx, DWORD PTR SumD$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumD$[rsp], eax
; Line 108
	mov	rax, QWORD PTR Input$[rsp]
	add	rax, 16
	mov	QWORD PTR Input$[rsp], rax
; Line 109
	jmp	$LN2@QuadScalar
$LN3@QuadScalar:
; Line 111
	mov	eax, DWORD PTR SumB$[rsp]
	mov	ecx, DWORD PTR SumA$[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR SumC$[rsp]
	add	eax, DWORD PTR SumD$[rsp]
	mov	DWORD PTR Sum$[rsp], eax
; Line 112
	mov	eax, DWORD PTR Sum$[rsp]
; Line 113
	add	rsp, 40					; 00000028H
	ret	0
QuadScalarPtr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Index$1 = 0
SumB$ = 4
SumA$ = 8
SumC$ = 12
SumD$ = 16
Sum$ = 20
Count$ = 48
Input$ = 56
QuadScalar PROC
; File C:\Users\zucw\Learning\computer_enhance\perfaware\part1\listing_0058_prologue_sum_loops.cpp
; Line 77
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 78
	mov	DWORD PTR SumA$[rsp], 0
; Line 79
	mov	DWORD PTR SumB$[rsp], 0
; Line 80
	mov	DWORD PTR SumC$[rsp], 0
; Line 81
	mov	DWORD PTR SumD$[rsp], 0
; Line 82
	mov	DWORD PTR Index$1[rsp], 0
	jmp	SHORT $LN4@QuadScalar
$LN2@QuadScalar:
	mov	eax, DWORD PTR Index$1[rsp]
	add	eax, 4
	mov	DWORD PTR Index$1[rsp], eax
$LN4@QuadScalar:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR Index$1[rsp], eax
	jae	SHORT $LN3@QuadScalar
; Line 84
	mov	eax, DWORD PTR Index$1[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR SumA$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumA$[rsp], eax
; Line 85
	mov	eax, DWORD PTR Index$1[rsp]
	inc	eax
	mov	eax, eax
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR SumB$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumB$[rsp], eax
; Line 86
	mov	eax, DWORD PTR Index$1[rsp]
	add	eax, 2
	mov	eax, eax
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR SumC$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumC$[rsp], eax
; Line 87
	mov	eax, DWORD PTR Index$1[rsp]
	add	eax, 3
	mov	eax, eax
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR SumD$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumD$[rsp], eax
; Line 88
	jmp	SHORT $LN2@QuadScalar
$LN3@QuadScalar:
; Line 90
	mov	eax, DWORD PTR SumB$[rsp]
	mov	ecx, DWORD PTR SumA$[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR SumC$[rsp]
	add	eax, DWORD PTR SumD$[rsp]
	mov	DWORD PTR Sum$[rsp], eax
; Line 91
	mov	eax, DWORD PTR Sum$[rsp]
; Line 92
	add	rsp, 40					; 00000028H
	ret	0
QuadScalar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Index$1 = 0
SumB$ = 4
SumA$ = 8
Sum$ = 12
Count$ = 32
Input$ = 40
DualScalar PROC
; File C:\Users\zucw\Learning\computer_enhance\perfaware\part1\listing_0058_prologue_sum_loops.cpp
; Line 63
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 64
	mov	DWORD PTR SumA$[rsp], 0
; Line 65
	mov	DWORD PTR SumB$[rsp], 0
; Line 66
	mov	DWORD PTR Index$1[rsp], 0
	jmp	SHORT $LN4@DualScalar
$LN2@DualScalar:
	mov	eax, DWORD PTR Index$1[rsp]
	add	eax, 2
	mov	DWORD PTR Index$1[rsp], eax
$LN4@DualScalar:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR Index$1[rsp], eax
	jae	SHORT $LN3@DualScalar
; Line 68
	mov	eax, DWORD PTR Index$1[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR SumA$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumA$[rsp], eax
; Line 69
	mov	eax, DWORD PTR Index$1[rsp]
	inc	eax
	mov	eax, eax
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR SumB$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR SumB$[rsp], eax
; Line 70
	jmp	SHORT $LN2@DualScalar
$LN3@DualScalar:
; Line 72
	mov	eax, DWORD PTR SumB$[rsp]
	mov	ecx, DWORD PTR SumA$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
; Line 73
	mov	eax, DWORD PTR Sum$[rsp]
; Line 74
	add	rsp, 24
	ret	0
DualScalar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Index$1 = 0
Sum$ = 4
Count$ = 32
Input$ = 40
Unroll2Scalar PROC
; File C:\Users\zucw\Learning\computer_enhance\perfaware\part1\listing_0058_prologue_sum_loops.cpp
; Line 51
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 52
	mov	DWORD PTR Sum$[rsp], 0
; Line 53
	mov	DWORD PTR Index$1[rsp], 0
	jmp	SHORT $LN4@Unroll2Sca
$LN2@Unroll2Sca:
	mov	eax, DWORD PTR Index$1[rsp]
	add	eax, 2
	mov	DWORD PTR Index$1[rsp], eax
$LN4@Unroll2Sca:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR Index$1[rsp], eax
	jae	SHORT $LN3@Unroll2Sca
; Line 55
	mov	eax, DWORD PTR Index$1[rsp]
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR Sum$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
; Line 56
	mov	eax, DWORD PTR Index$1[rsp]
	inc	eax
	mov	eax, eax
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR Sum$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
; Line 57
	jmp	SHORT $LN2@Unroll2Sca
$LN3@Unroll2Sca:
; Line 59
	mov	eax, DWORD PTR Sum$[rsp]
; Line 60
	add	rsp, 24
	ret	0
Unroll2Scalar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Index$1 = 0
Sum$ = 4
Count$ = 32
Input$ = 40
SingleScalar PROC
; File C:\Users\zucw\Learning\computer_enhance\perfaware\part1\listing_0058_prologue_sum_loops.cpp
; Line 40
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 41
	mov	DWORD PTR Sum$[rsp], 0
; Line 42
	mov	DWORD PTR Index$1[rsp], 0
	jmp	SHORT $LN4@SingleScal
$LN2@SingleScal:
	mov	eax, DWORD PTR Index$1[rsp]
	inc	eax
	mov	DWORD PTR Index$1[rsp], eax
$LN4@SingleScal:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR Index$1[rsp], eax
	jae	SHORT $LN3@SingleScal
; Line 44
	mov	eax, DWORD PTR Index$1[rsp]
	mov	rcx, QWORD PTR Input$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR Sum$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
; Line 45
	jmp	SHORT $LN2@SingleScal
$LN3@SingleScal:
; Line 47
	mov	eax, DWORD PTR Sum$[rsp]
; Line 48
	add	rsp, 24
	ret	0
SingleScalar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
A$ = 8
B$ = 16
add	PROC
; File C:\Users\zucw\Learning\computer_enhance\perfaware\part1\listing_0058_prologue_sum_loops.cpp
; Line 35
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 36
	mov	eax, DWORD PTR B$[rsp]
	mov	ecx, DWORD PTR A$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 37
	ret	0
add	ENDP
_TEXT	ENDS
END
